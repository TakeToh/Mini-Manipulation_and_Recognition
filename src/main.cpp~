#include "ros/ros.h"

// Include Actionlib
#include <actionlib/client/simple_action_client.h>
#include <actionlib/client/terminal_state.h>

// Message that was deal with ORK_SERVER
#include <object_recognition_msgs/ObjectRecognitionAction.h>
#include <object_recognition_msgs/ObjectRecognitionActionResult.h>
// Server Result Class
#include <object_recognition_msgs/RecognizedObjectArray.h>

// To deal with Messeages 
#include <object_recognition_msgs/GetObjectInformation.h>
#include <object_recognition_msgs/ObjectType.h>
#include <object_recognition_msgs/ObjectInformation.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>
#include <iostream>

// To drive KOBUKI
#include <nav_msgs/Odometry.h>
#include <geometry_msgs/Quaternion.h>
#include <tf/transform_datatypes.h>
#include <math.h>

// To Move ARM
#include <arm_pose/ArmPose.h>


// DEBUG OPTION
#define DEBUG

struct POSE
{
	double x;
	double y;
	double t;
	double z;
};

template < typename TYPE, int SIZE>
int getSize(const TYPE (&x)[SIZE]){	return SIZE;	}

///////////////////////////////////////////////////////////////////
///		KOBUKI MOVE 
///////////////////////////////////////////////////////////////////
geometry_msgs::Twist cmd_vel;			// speed parametor
POSE kobuki_pose;

void odomCallback(const nav_msgs::Odometry::ConstPtr &odom)
{
    geometry_msgs::Quaternion quat;

    kobuki_pose.x = odom->pose.pose.position.x;
    kobuki_pose.y = odom->pose.pose.position.y;

    quat.x = odom->pose.pose.orientation.x;
    quat.y = odom->pose.pose.orientation.y;
    quat.z = odom->pose.pose.orientation.z;
    quat.w = odom->pose.pose.orientation.w;

    kobuki_pose.t = tf::getYaw(quat);
    kobuki_pose.z = 0;
}

void Move(double _vx, double _vy,double _vtheta)
{
    cmd_vel.linear.x = _vx;
    cmd_vel.linear.y = _vy;
    cmd_vel.angular.z = _vtheta;
}

///////////////////////////////////////////////////////////////////
///		OBJECT DATA FROM ACTION LIB 
///////////////////////////////////////////////////////////////////
object_recognition_msgs::RecognizedObjectArray result;
POSE Objects[10];
geometry_msgs::Point pose;
int ObjectsNum;

actionlib::SimpleActionClient<object_recognition_msgs::ObjectRecognitionAction> ac("recognize_objects", true);

bool GetDataObject(void)
{
	ac.waitForServer(); //will wait for infinite time
	object_recognition_msgs::ObjectRecognitionGoal goal;
	ac.sendGoal(goal);
	bool finished_before_timeout = ac.waitForResult(ros::Duration(30.0));

	object_recognition_msgs::RecognizedObjectArray result;

	if(ac.getState()== actionlib::SimpleClientGoalState::SUCCEEDED){
		result = ac.getResult()->recognized_objects;
	}

	object_recognition_msgs::RecognizedObject* objects = &result.objects[0];
	ObjectsNum = sizeof(*objects) / sizeof(object_recognition_msgs::RecognizedObject);
	bool flag_GetData = true;

	for(int i =0; i<ObjectsNum; i++){
		pose = objects[i].pose.pose.pose.position;

		if( !pose.x && !pose.y && !pose.z && i==0){
			flag_GetData=false;
			return false;
		}else{
			Objects[i].x=pose.x;
			Objects[i].y=pose.y;
			Objects[i].z=pose.z;
			Objects[i].t=0;	
		}
	}

#ifdef DEBUG
	for(int i =0; i<ObjectsNum; i++){
		std::cout << "RESULT HEADER:" << result.header << std::endl;
		std::cout << "CONFIDENCE: " << objects[i].confidence << std::endl;

		if(flag_GetData){
			std::cout << "Position X" << Objects[i].x << std::endl;
			std::cout << "Position Y" << Objects[i].y << std::endl;
			std::cout << "Position Z" << Objects[i].z << std::endl;
			std::cout << "Position T" << Objects[i].t << std::endl;
		}
	}

	if (finished_before_timeout){
		actionlib::SimpleClientGoalState state = ac.getState();
		ROS_INFO("Action finished: %s",state.toString().c_str());
	}else{
		ROS_INFO("Action did not finish before the time out.");
	}
#endif
}

///////////////////////////////////////////////////////////////////
///
///		STAGE 1 Aim to Objects
///		1. Data has position or doesn't
///		2. transform data_position to world position
///		3. revolve KOBUKI in order to face with object
///
///		bool STAGE_FAST(int num)-----int num -> Object Counter (Max 5)
///////////////////////////////////////////////////////////////////
POSE ob[10];

bool STAGE_FAST(int num)
{
	if( !GetDataObject() )
	{
		ROS_INFO("NOT data form ActionLib\n");
		return false;
	}
	
	for(int i =0; i<ObjectsNum; i++){
		ob[i].x = Objects[i].z;
		ob[i].y = Objects[i].x;
		ob[i].z = -1*Objects[i].y;
		ob[i].t = tan(ob[i].y/ob[i].x);
	}

#ifdef DEBUG
	for(int i =0; i<ObjectsNum; i++){
		std::cout << "OBJECT POTISION X=" << ob[i].x << std::endl;
		std::cout << "OBJECT POTISION Y=" << ob[i].y << std::endl;
		std::cout << "OBJECT POTISION Z=" << ob[i].z << std::endl;
		std::cout << "OBJECT POTISION T=" << ob[i].t << std::endl;
	}
#endif

	while( ob[num].t < -5*180/M_PI && ob[num].t > 5*180/M_PI){
		if(ob[num].t >0.0){
			Move(0.0, 0.0, 4.0);
		}else{
			Move(0.0, 0.0, -4.0);
		}
	}

	ROS_INFO("ROBOT has aimed object now\n");

	while(ob[num].x > 1000){
		Move(3.0, 0.0, 0.0);
	}

	ROS_INFO("ROBOT has moved to catching point now\n");
	return true;
}

///////////////////////////////////////////////////////////////////
///
///		STAGE 2 SET UP ARM POSITION
///		1. set up request file
///		2. send this request file 
///		
///////////////////////////////////////////////////////////////////

    
bool STAGE_SECOND(int num){
	ros::NodeHandle node;
	ros::ServiceClient client = node.serviceClient<arm_pose::ArmPose>("arm_pose");
	
	arm_pose::ArmPose srv;

	srv.request.x =  ob[num].x;
	srv.request.y =  ob[num].y;
	srv.request.motion =  "catch";

	if(client.call(srv)){
		if(srv.response.result ==1){
			ROS_INFO("PROGRMA send request to Arm_POSE completly");
		}else{
			ROS_INFO("PROGRMA send request to Arm_POSE but errors occured");
		}
	}else{
		ROS_ERROR("Failed to call service arm_pose");
	}

}




int main (int argc, char **argv)
{
	ros::init(argc, argv, "manip_and_recog");

    ros::NodeHandle node;

    ros::Subscriber odom_sub = node.subscribe("odom",1,odomCallback);
    ros::Publisher vel_pub = node.advertise<geometry_msgs::Twist>("cmd_vel",1);
	

    bool result;
    int STAGE_NUMBER;

    switch(STAGE_NUMBER){
    	case 1: result=STAGE_FAST(0);
    }

    if(result){
    	STAGE_NUMBER++;
    }


	ros::spin();
	return 0;
}